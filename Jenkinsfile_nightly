#!groovy

properties([
  pipelineTriggers([cron('H 8 * * 1-5')]),
  disableConcurrentBuilds(),
  parameters([
    string(
      name: 'BASE_URL',
      defaultValue: 'https://ccdcspreprod.caselines.co.uk/',
      description: 'The Base URL to test against'
      name: 'BASE_URL',
      defaultValue: 'https://ccdcspreprod.caselines.co.uk/',
      description: 'The Base URL to test against'
    ),
    string(
      name: 'FUNCTIONAL_TESTS_WORKERS',
      defaultValue: '4',
      description: 'Number of workers running functional tests'
    ),
    string(
      name: 'TAGS_TO_RUN',
      defaultValue: '',
      description: 'Optionally, run a single or multiple tags (comma separated e.g. @cui, @exui)'
    ),
    choice(
      name: 'BROWSER_TO_RUN',
      choices: ['chromium', 'chrome', 'firefox', 'webkit', 'edge', 'tabletchrome', 'tabletwebkit'],
      description: 'Choose what browsers will be run (only when a tag is specified)'
    ),
  ])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "dcs-automation"
def component = "sds"
def channel = "#dcs-automation"

static Map < String, Object > secret(String secretName, String envVariable) {
  [
    $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}

def secrets = [
  'dcs-automation-bts-stg': [
    secret('HMCTS-ADMIN-PASSWORD', 'HMCTS_ADMIN_PASSWORD'),
    secret('BASE-URL-PREPROD', 'BASE_URL_PREPROD'),
    secret('BASE-URL-UAT', 'BASE_URL_UAT'),
    secret('CPS-ADMIN-PASSWORD', 'CPS_ADMIN_PASSWORD'),
    secret('COOKIE', 'COOKIE'),
    secret('CPS-PROSECUTOR-PASSWORD', 'CPS_PROSECUTOR_PASSWORD'),
    secret('DEFENCE-A-PASSWORD', 'DEFENCE_ADVOCATE_A_PASSWORD'),
    secret('DEFENCE-B-PASSWORD', 'DEFENCE_ADVOCATE_B_PASSWORD'),
    secret('DEFENCE-C-PASSWORD', 'DEFENCE_ADVOCATE_C_PASSWORD'),
    secret('JUDGE-PASSWORD', 'FULL_TIME_JUDGE_PASSWORD'),
    secret('NOMS-PROBATION-PASSWORD', 'PROBATION_STAFF_PASSWORD'),
  ]
]

def buildPlaywrightCommand(tags, browser) {
  if (tags == null || tags.trim().isEmpty()) {
    return;
  }
  def tagList = tags.split(',').collect { it.trim() }

  def command = 'playwright test tests/'
    tagList.each { tag ->
    if (!tag.isEmpty()) {
      command += " --grep ${tag}"
    }
  }

  if (browser) {
    command += " --project=${browser}"
  }

  return command
}

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

withNightlyPipeline(type, product, component, 600) {
  loadVaultSecrets(secrets)
  env.BASE_URL = params.BASE_URL
  env.FUNCTIONAL_TESTS_WORKERS = params.FUNCTIONAL_TESTS_WORKERS
  enableSlackNotifications(channel)

  afterAlways('DependencyCheckNightly') {
    stage('Delete nightly dev branch') {
      try {
        yarnBuilder.yarn('delete-nightly-dev-branch dcs-e2e-tests')
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      }
    }
    stage('Set up playwright') {
      try {
        yarnBuilder.yarn('setup')
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      }
    }
    if (!TAGS_TO_RUN.isEmpty()) {
      stage("${TAGS_TO_RUN} E2E Tests for ${params.BROWSER_TO_RUN}") {
        try {
          currentBuild.displayName = "${TAGS_TO_RUN} E2E Tests for ${params.BROWSER_TO_RUN}"
          if (params.BROWSER_TO_RUN == 'edge') yarnBuilder.yarn('setup:edge')
          yarnBuilder.yarn(buildPlaywrightCommand(TAGS_TO_RUN, params.BROWSER_TO_RUN))
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: "${TAGS_TO_RUN} E2E Tests for ${params.BROWSER_TO_RUN}"
          ])
        }
      }
    } else {
      currentBuild.displayName = "All E2E Tests"
      stage('Chrome E2E Tests') {
        try {
          yarnBuilder.yarn('test:chrome')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: 'Chrome E2E Tests'
          ])
        }
      }
      stage('Firefox E2E Tests') {
        try {
          yarnBuilder.yarn('test:firefox')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: 'Firefox E2E Tests'
          ])
        }
      }
      stage('Webkit E2E Tests') {
        try {
          yarnBuilder.yarn('test:webkit')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: 'Webkit E2E Tests'
          ])
        }
      }
      stage('Edge E2E Tests') {
        try {
          yarnBuilder.yarn('setup:edge') // Use hermetic install for edge
          yarnBuilder.yarn('test:edge')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: 'Edge E2E Tests'
          ])
        }
      }
      stage('Accessibiity Tests') {
        try {
          yarnBuilder.yarn('test:a11y')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: 'Accessibility Tests'
          ])
        }
      }
    }
  }
}
